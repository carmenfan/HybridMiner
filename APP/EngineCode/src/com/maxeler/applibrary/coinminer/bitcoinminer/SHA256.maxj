/*********************************************************************
 * Maxeler Technologies : Hybrid Coin Miner                          *
 *                                                                   *
 * Version: 1.0                                                      *
 * Date:    13th March 2014                                          *
 *                                                                   *
 * DFE code source file                                              *
 *                                                                   *
 *********************************************************************/

package com.maxeler.applibrary.coinminer.bitcoinminer;

import java.util.Arrays;

import com.maxeler.maxcompiler.v2.kernelcompiler.KernelLib;
import com.maxeler.maxcompiler.v2.kernelcompiler.stdlib.Bitops;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEType;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFETypeFactory;
import com.maxeler.maxcompiler.v2.kernelcompiler.types.base.DFEVar;
import com.maxeler.maxcompiler.v2.utils.Bits;

/**
 * Implementation of the SHA256 algorithm
 */
public class SHA256 extends KernelLib {

	public static class Optimizations {
		final boolean isSingleCycle;

		public Optimizations(boolean isSingleCycle) {
			this.isSingleCycle = isSingleCycle;
		}
	}


	/**
	 * Round constants for SHA-256.
	 * <p>
	 * These are the first 32 bits of the fractional parts of the cube
	 * roots of the first 64 prime numbers.
	 */
	private static int[] K = {
		0x428a2f98, 0x71374491, 0xb5c0fbcf, 0xe9b5dba5,
		0x3956c25b, 0x59f111f1, 0x923f82a4, 0xab1c5ed5,
		0xd807aa98, 0x12835b01, 0x243185be, 0x550c7dc3,
		0x72be5d74, 0x80deb1fe, 0x9bdc06a7, 0xc19bf174,
		0xe49b69c1, 0xefbe4786, 0x0fc19dc6, 0x240ca1cc,
		0x2de92c6f, 0x4a7484aa, 0x5cb0a9dc, 0x76f988da,
		0x983e5152, 0xa831c66d, 0xb00327c8, 0xbf597fc7,
		0xc6e00bf3, 0xd5a79147, 0x06ca6351, 0x14292967,
		0x27b70a85, 0x2e1b2138, 0x4d2c6dfc, 0x53380d13,
		0x650a7354, 0x766a0abb, 0x81c2c92e, 0x92722c85,
		0xa2bfe8a1, 0xa81a664b, 0xc24b8b70, 0xc76c51a3,
		0xd192e819, 0xd6990624, 0xf40e3585, 0x106aa070,
		0x19a4c116, 0x1e376c08, 0x2748774c, 0x34b0bcb5,
		0x391c0cb3, 0x4ed8aa4a, 0x5b9cca4f, 0x682e6ff3,
		0x748f82ee, 0x78a5636f, 0x84c87814, 0x8cc70208,
		0x90befffa, 0xa4506ceb, 0xbef9a3f7, 0xc67178f2
	};

	/**
	 * Initial hash values for SHA-256.
	 * <p>
	 * These are the the first 32 bits of the fractional parts of the
	 * square roots of the first 8 prime numbers.
	 */
	private static int[] H = {
		0x6a09e667, 0xbb67ae85, 0x3c6ef372, 0xa54ff53a,
		0x510e527f, 0x9b05688c, 0x1f83d9ab, 0x5be0cd19
	};

	/** Number of bits in a word. */
	private static final int wordSize = 32;
	/** Arithmetic computation word type. */
	private static final DFEType wordType = DFETypeFactory.dfeUInt(wordSize);


	private final Optimizations opt;


	public SHA256(KernelLib owner) {
		this(owner, new Optimizations(false));
	}

	public SHA256(KernelLib owner, Optimizations opt) {
		super(owner);
		this.opt = opt;
	}

	/**
	 * Hash a 512-bit message block.
	 * @param m A 512-bit message block.
	 * @return The SHA-256 hash value for the message block as an array of
	 * 8 32-bit values.
	 */
	public DFEVar[] hashBlock(DFEVar[] ms) {
		// get the initial hash value
		DFEVar[] initHash = new DFEVar[H.length];
		for (int i = 0; i < initHash.length; ++i)
			initHash[i] = constant(H[i]);

		return hashBlock(ms, initHash);
	}

	/**
	 * Hash a 512-bit message block.
	 * @param m A 512-bit message block (an array of 16 32-bit values).
	 * @param hash The previous hash value (an array of 8 32-bit values).
	 * @return The next hash value (an array of 8 32-bit values).
	 */
	public DFEVar[] hashBlock(DFEVar[] ms, DFEVar[] hash) {

		// calculate the message schedule
		DFEVar[] w = messageSchedule(ms);

		// compute the K[t] + w[t]
		DFEVar[] wk = new DFEVar[64];
		for (int t = 0; t < 64; t++) {
			wk[t] = constant(K[t]) + w[t];
		}

		// compute the 64 rounds
		DFEVar[] v = Arrays.copyOf(hash, hash.length);
		v[7] += wk[0];
		for (int t = 0; t < 64; ++t)
			v = round(v, wk, t);

		// compute the next hash value
		for (int i = 0; i < v.length; ++i)
			v[i] = v[i] + hash[i];

		return v;
	}




	private DFEVar constant(int value) {
		Bits b = new Bits(wordSize);
		b.setBits(value);
		return constant.var(wordType, b);
	}



	private DFEVar[] messageSchedule(DFEVar[] m) {
		// prepare the message schedule
		DFEVar[] w = Arrays.copyOf(m, 64);

		for (int t = 16; t < 64; ++t)
			w[t] = (smallSigma1(w[t - 2]) + w[t - 7]) + (smallSigma0(w[t - 15]) + w[t - 16]);

		return w;
	}

	/**
	 * Calculate a single round of SHA-256.
	 * @param v  An array of 8 working variables.
	 * @param wk An array containing the sum of the message schedule wt and Kt.
	 * @param t  The round index ({@code 0 &amp;= t &amp; 64}).
	 * @return An array of 8 new working variables.
	 */
	private DFEVar[] round(DFEVar[] v, DFEVar[] w, int t) {
		// Rename variables to match standard descriptions of the SHA algorithm
		DFEVar a = v[0], b = v[1], c = v[2], d = v[3], e = v[4], f = v[5], g = v[6], h = v[7];

		if (opt.isSingleCycle) { pushPF(0); }

		/* Work-around for #6068: enable bit-growth and truncate to avoid
		 * exceptions relating to constant overflow.
		 */
		pushBG();
		DFEVar t1 = to32(bigSigma1(e) + ch(e, f, g) + h);
		DFEVar t2 = to32(bigSigma0(a) + maj(a, b, c));
		popBG();

		if (opt.isSingleCycle) { popPF(); }

		return new DFEVar[] {
				t1 + t2,
				a,
				b,
				c,
				t1 + d,
				e,
				f,
				t < 63 ? (g + w[t+1]) : g
		};
	}

	public DFEVar ch(DFEVar x, DFEVar y, DFEVar z) {
		pushPF(0);
		DFEVar ch = (x & y) ^ (~x & z);
		popPF();
		return ch;
	}

	public DFEVar maj(DFEVar x, DFEVar y, DFEVar z) {
		pushPF(0);
		DFEVar maj = (x & y) ^ (x & z) ^ (y & z);
		popPF();
		return maj;
	}

	private DFEVar bigSigma(DFEVar x, NodeSHA256BigSigma.Function function) {
		pushPF(0);
		DFEVar bigSigma = rotateRight(x, function.rotate1) ^ rotateRight(x, function.rotate2) ^ rotateRight(x, function.rotate3);
		popPF();
		return bigSigma;
	}

	private DFEVar smallSigma(DFEVar x, NodeSHA256SmallSigma.Function function) {
		pushPF(0);
		DFEVar smallSigma = rotateRight(x, function.rotate1) ^ rotateRight(x, function.rotate2) ^ x.shiftRight(function.shift);
		popPF();
		return smallSigma;
	}

	public DFEVar bigSigma0(DFEVar x) {
		return bigSigma(x, NodeSHA256BigSigma.Function.SIGMA0);
	}

	public DFEVar bigSigma1(DFEVar x) {
		return bigSigma(x, NodeSHA256BigSigma.Function.SIGMA1);
	}

	public DFEVar smallSigma0(DFEVar x) {
		return smallSigma(x, NodeSHA256SmallSigma.Function.SIGMA0);
	}

	public DFEVar smallSigma1(DFEVar x) {
		return smallSigma(x, NodeSHA256SmallSigma.Function.SIGMA1);
	}

	private DFEVar rotateRight(DFEVar x, int amt) {
		return Bitops.circularRightShift(x, x.getKernel().constant.var(amt)).cast(x.getType());
	}


	public static class NodeSHA256BigSigma {
		public enum Function {
			SIGMA0(2, 13, 22),
			SIGMA1(6, 11, 25);

			public final int rotate1;
			public final int rotate2;
			public final int rotate3;

			private Function(int rotate1, int rotate2, int rotate3) {
				this.rotate1 = rotate1;
				this.rotate2 = rotate2;
				this.rotate3 = rotate3;
			}
		}

	}

	public static class NodeSHA256SmallSigma {
		public enum Function {
			SIGMA0(7, 18, 3),
			SIGMA1(17, 19, 10);

			public final int rotate1;
			public final int rotate2;
			public final int shift;

			private Function(int rotate1, int rotate2, int shift) {
				this.rotate1 = rotate1;
				this.rotate2 = rotate2;
				this.shift = shift;
			}
		}
	}


	private void pushPF(double x) {
		optimization.pushPipeliningFactor(x);
	}

	private void popPF() {
		optimization.popPipeliningFactor();
	}

	private void pushBG() {
		optimization.pushEnableBitGrowth(true);
	}

	private void popBG() {
		optimization.popEnableBitGrowth();
	}

	private DFEVar to32(DFEVar x) {
		return x.slice(0, wordSize).cast(dfeUInt(wordSize));
	}

}

